# 워크플로우 이름
name: Spring Boot CI/CD

# 워크플로우 실행 조건: dev 브랜치에 push될 때 실행
# paths의 경로에 변경사항이 있을때만 실행
# srokflow_dispatch로 수동 실행 가능하게 만듬
# 수동 배포 시 default 값 no 지만 yes 입력 시 수동 배포
on:
  push:
    branches:
      - dev
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'settings.gradle'
  workflow_dispatch:
    inputs:
      confirm:
        description: '⚠️ 진짜 배포하시겠습니까? yes 입력 시에만 진행됩니다.'
        required: true
        default: 'no'

jobs:
  build-deploy:
    # GitHub Actions에서 사용할 실행 환경
    runs-on: ubuntu-latest

    steps:
      # 저장소의 코드를 체크아웃 (runner server에 복사)
      - name: Checkout
        uses: actions/checkout@v3

      # Gradle 캐시 설정 - 캐시 저장해 빌드 시간 단축
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
              ~/.gradle/caches
              ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # JDK 21 설치 (corretto 사용)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'

      # Gradlew 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Gradle로 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test -x checkstyleMain -x checkstyleTest -x jacocoTestReport

      # Docker Hub에 로그인 (비밀번호는 GitHub Secrets에서 가져옴)
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          
      # Docker Buildx 및 레이어 캐시 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker Image with cache
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            --build-arg JAR_FILE=build/libs/*.jar \
            --build-arg SPRING_PROFILES_ACTIVE=dev \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/spring-app \
            --load .

      # Docker 이미지 푸시 (Docker Hub 업로드)
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/spring-app

      # EC2에 접속하기 위한 SSH 키 복사 및 권한 설정
      - name: Copy SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key

        # EC2 서버 호스트키 등록 (보안 강화를 위해 known_hosts에 추가)
      - name: Add EC2 Host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # EC2 서버에 접속해서 배포 작업 실행
      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/ec2_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            cd /home/ubuntu/app
            
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
            
            docker compose pull

            docker compose down

            docker compose up -d

            docker image prune -f
          EOF
          
        # SSH를 통해 EC2 인스턴스에 접속 (비공개 키, 사용자, 호스트 정보 사용)
        # 애플리케이션이 위치한 디렉토리로 이동
        # Docker Hub에서 docker-compose.yml에 명시된 최신 이미지 pull
        # 현재 실행 중인 모든 컨테이너 중지 및 삭제
        # 최신 이미지를 기반으로 컨테이너 재시작 (백그라운드 모드)
        # 더 이상 사용되지 않는 Docker 이미지 강제 삭제 (디스크 공간 확보)
        # EOF는 원래 ssh는 한 줄로 명령하지만 저렇게 사용하므로써 그 사이를 순차적으로 실행
