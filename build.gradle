plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
    id 'jacoco'
}

jacoco {
    toolVersion = "0.8.13"
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // spring boot starter data
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'

    // spring boot starter
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // password encode
    implementation 'at.favre.lib:bcrypt:0.10.2'

    // MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'

    // H2
    runtimeOnly 'com.h2database:h2'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // redisson
    implementation 'org.redisson:redisson-spring-boot-starter:3.23.4'
    //  Redisson을 Spring Boot와 통합해서 쉽게 사용할 수 있게 해줌. Redisson은 고급 분산 기능 제공.

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // aws
    implementation platform('software.amazon.awssdk:bom:2.31.60')
    implementation 'software.amazon.awssdk:sns'
    implementation 'software.amazon.awssdk:sqs'
    implementation 'software.amazon.awssdk:auth'
    implementation 'software.amazon.awssdk:sts'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Spring Boot 테스트의 기본 세트. 단위 테스트, 통합 테스트 등 거의 모든 Spring 기반 테스트에 필수
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.springframework.security:spring-security-test' // Spring Security 관련 테스트 기능을 제공하는 라이브러리
    testImplementation 'com.navercorp.fixturemonkey:fixture-monkey-starter:1.1.11' // 테스트할 때 더미 객체(Object)를 자동 생성
    testAnnotationProcessor 'org.projectlombok:lombok' // 테스트 코드에서 Lombok 어노테이션을 처리하기 위해 사용하는 annotation processor
    testCompileOnly 'org.projectlombok:lombok' // 테스트 코드에서 Lombok을 사용할 수 있게 하지만, 실제 빌드 결과물에는 포함되지 않게 설정
    testRuntimeOnly 'com.h2database:h2' // 테스트 실행 시에만 필요한 H2 데이터베이스 라이브러리
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    //JUnit 5 플랫폼 런처. 보통 직접 쓸 일이 없고, IDE나 빌드 도구(예: Gradle, Maven)가 테스트를 실행할 수 있게 해주는 백엔드 런타임 라이브러리
    testImplementation 'org.assertj:assertj-core:3.24.2'
    // JUnit 테스트에서 사용하는 assertEquals, assertTrue 같은 기본적인 assertion보다 더 읽기 쉽고 강력한 문법을 제공
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api:2.1.1'

    // feignclient 의존성 추가

    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.1"
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport' // 테스트(test task)가 끝나면 자동으로 jacocoTestReport task 실행. 즉, 테스트 끝나면 코드 커버리지 리포트가 만들어짐.
    ignoreFailures = true // 테스트 실패해도 빌드 자체는 실패하지 않도록 설정 (CI 환경에서 유용)
}

/*
 * 테스트 코드 커버리지 리포트를 생성하는 Gradle task
 */
jacocoTestReport {
    dependsOn test // 테스트가 먼저 실행되어야 리포트를 생성할 수 있음
    reports {
        html.required = true // HTML 형식 커버리지 리포트 (브라우저에서 보기 좋음)
        xml.required = true // CI 도구 (예: SonarQube 등)에서 활용하기 위해 사용
        csv.required = false // 꺼져 있음 (필요 없다면 false)
    }
}
compileJava.options.encoding = 'UTF-8' // 자바 소스 파일의 문자 인코딩을 UTF-8로 명시. 윈도우 환경 등에서 인코딩 문제 생기는 것을 방지
compileTestJava.options.encoding = 'UTF-8'

/*
 * Checkstyle 실행 시 XML, HTML 형식의 리포트를 생성하도록 설정
 */
tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyle {
    maxWarnings = 0  // maxWarnings = 0: 경고 1개만 있어도 빌드 실패
    configFile = file("config/checkstyle/naver-checkstyle-rules.xml")
    // configFile: 체크스타일 룰이 정의된 XML 경로
    configProperties = ["suppressionFile": "config/checkstyle/naver-checkstyle-suppressions.xml"]
    // configProperties: 룰 중 예외 규칙(suppression) 지정 파일
    toolVersion = "8.24" // toolVersion: 사용할 Checkstyle 버전 지정 (8.24)
}

